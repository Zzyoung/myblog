---
layout: post
title:  "初探HTTPS"
date:   2017-05-21 10:22:17 +0800
categories: HTTPS
---


作为互联网从业人员，我们可能都听说过 HTTPS；作为普通用户，我们可能在进入一个页面的时候被警告，“您访问的链接不安全”；作为技术人员，在面试中可能也被问过 HTTPS 和 HTTP 的区别。这些现象都离不开一个东西，或者说整个互联网都离不开这个东西——HTTPS。这篇文章就给大家介绍一下什么是 HTTPS，它是如何工作的。

如果有不了解 HTTP的，可以看一下这段简介:

> HTTP是一个客户端终端（浏览器）和服务器端（服务器）请求和应答的一系列规则（标准），是互联网上应用最为广泛的一种网络协议。

我们学习一门新知识，首先要搞清楚四件事情：
1. HTTPS是什么？
2. 为什么要用HTTPS？
3. 谁在用HTTPS？
4. 怎么用HTTPS？

#### HTTPS是什么？
HTTPS的全称叫做 **超文本传输安全协议**，可以理解为更安全的超文本传输协议。

#### 为什么要用HTTPS？
聪明的同学可以从上个问题猜出来答案，因为它更安全，所以要用它。HTTPS 是更安全的话，那么可以推断出 HTTP 是不安全的。可 HTTP 怎么就不安全了呢？主要有以下几点：
1. **通信使用明文（不加密），内容可能会被窃听**
2. **不验证通信方的身份，因此有可能遭遇伪装**
3. **无法证明报文的完整性，所以有可能已遭篡改**

#### 谁在用HTTPS？
注重安全、有实力的互联网公司已经都升级到HTTPS了

#### 怎么用HTTPS？
这个主要是网站运维人员的工作，通过向CA机构购买证书，然后部署在服务器上，网站便支持通过HTTPS来访问了。

看完上面四个问题，应该对HTTPS有了一个初步的认识，接下来分析一下 HTTPS 为什么安全？

### HTTPS 为什么安全？
HTTPS 并非是应用层的一种新协议，只是在HTTP和TCP通信之前，先和 SSL（Secure Socket Layer）和 TLS（Transport Layer Security）通信，SSL 会对 HTTP 的报文进行加密，再由 SSL 和 TCP 通信。简言之，HTTPS 就是披了一层 SSL 保护的 HTTP。

Ps. SSL是独立于 HTTP 的协议，所以不光是 HTTP 协议，其他运行在应用层的 SMTP 和 Telnet 等协议均可配合 SSL 协议使用。


### 如何加密？如何解密？
上面说到 SSL 会对 HTTP 要传输的数据进行加密，怎么加密？加密后的数据达到服务器端，服务器怎么解密？

既然说到加密了，那就需要介绍一下常用的两种加密方法
：
1. 共享密钥加密（也叫对称密钥加密）：加密和解密同用一个密钥的加密方式。
2. 公开密钥加密（也叫非对称密钥加密）：这种方式有两把密钥，一把叫做私有密钥，一把叫做公开密钥。通过公开密钥加密，然后通过私有密钥解密。公开密钥可以公开给任何人，但私有密钥只有自己才知道。

先来试试第一种加密方式，客户端通过密钥加密，然后把密钥和加密后的数据一起发给服务器，然后服务器解密。聪明人一眼就可以看出来这种方式行不通，如果能保证密钥能安全到达服务器的话，那数据也能安全到达，所以这种办法行不通。

第二种方式很好的解决了共享密钥加密的困难。客户端通过公开密钥加密，然后把加密后的数据发送给服务器，服务器再通过私有密钥解密。私有密钥只有一份，就算窃听者拿到数据，也无法解密。

不过第二种加密方式也有缺陷，那就是采用了复杂的加密解密方式，导致它的处理速度比第一种要慢。所以 HTTPS 采用了共享密钥加密和公开密钥加密两者并用的混合加密机制。具体方式如下：

```
sequenceDiagram
客户端->>服务器: 使用公开密钥对共享密钥进行加密
服务器->>客户端: 使用公开密钥对共享密钥进行加密
客户端->>服务器: 共享密钥加密的数据
服务器->>客户端: 共享密钥加密的数据
```

### 怎么保证服务器公钥的真实性？

这种方式看上去很理想，遗憾的是，依然存在一个问题没解决，那就是**无法证明公开密钥本身就是货真价实的公开密钥**。如何解决这个问题呢？在上面介绍如何使用 HTTPS 的时候，说到了两个关键字“CA”和“证书”，解决办法就是这两个关键字。

> 数字证书认证机构（CA，Certificate Authority），也称为电子商务认证中心、电子商务认证授权机构，是负责发放和管理数字证书的权威机构，并作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任。

例如某互联网公司需要升级到 HTTPS，就需要向 CA 申请购买数字证书。CA会先判明申请者的身份，然后对已申请的公开密钥做**数字签名**，然后分配这个已签名的公开密钥，并将这个公开密钥和公钥证书绑定在一起颁发给申请者。

证书中包含很多字段：
- Web站点的名称和主机名
- Web站点的公开密钥
- 签名颁发机构的名称
- 来自签名颁发机构的数字签名

Ps. 除了加/解密报文之外，还可以用加密系统对报文进行签名，以说明是谁编写的报文，同时证明报文未被篡改过，这种技术被称为**数字签名**。

现代浏览器发起一个 HTTPS 连接之后（还没握手完成），都会自动获取所连服务器的数字证书，如果没有数字证书，HTTPS 就会建立失败。

浏览器收到证书后，使用数字证书认证机构的公开密钥，像数字证书认证机构验证公钥证书上的数字签名，以确认服务器的公开密钥的真实性。

上面这一段出现了两个公开密钥，需要详细解释一下。数字证书拥有一对非对称密钥，也就是一把私有密钥，一把公开密钥。私有密钥用来对证书做数字签名，而公开密钥则会预先安装在浏览器中，这样浏览器就会确认出服务器公钥证书的真实性。

### SSL 握手

在保证了服务器公钥的真实性之后，就可以进行安全的通信了，最后整理一下完整的 SSL 握手的步骤：

```
sequenceDiagram
客户端->>服务器: Client Hello
服务器->>客户端: Sever Hello
服务器->>客户端: Certificate
服务器->>客户端: Sever Hello Done
客户端->>服务器: Client Key Exchange
客户端->>服务器: Change Cipher Spec
客户端->>服务器: Finished
服务器->>客户端: Change Cipher Spec
服务器->>客户端: Finished
客户端->>服务器: Application Data (HTTP)
服务器->>客户端: Application Data (HTTP)
```

1. 客户端发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、加密组件列表（所使用的加密算法及密钥长度）。
2. 如果服务器支持 SSL 通信，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 以及加密组件。服务器的加密组件内容是从接受到的客户端加密组件内筛选出来的。
3. 之后服务器发送 Certificate 报文。该报文中包含公开密钥证书。
4. 最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的 SSL 握手协商部分结束。
5. SSL 第一次握手结束之后，客户端以 Client Key Exchange 报文作为回应。报文中包含了接下来会使用到的共享密钥。该报文已用步骤3的公开密钥进行加密。
6. 接着客户端发送 Change Cipher Spec 报文，该报文提示服务器，在此报文之后的通信会采用共享密钥加密。
7. 客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商能否成功，要以服务器能否正确解密该报文作为判定条件。（判断服务器是否拿到共享密钥以及成功解密该条报文）
8. 服务器同样发送 Change Cipher Spec 报文。
9. 服务器同样发送 Finished 报文。

以上便是 SSL 握手的详细过程，总结一下主要做了这四件事：
- 交换协议版本号
- 选择一个两端都了解的密码
- 对两端的身份进行验证（这里并没有涉及到客户端证书）
- 生成临时的会话密钥（新的连接会生成新的共享密钥），以便加密信道

### 完整性校验
在 SSL 握手之后，应用层发送数据时会附加一种叫做消息认证码（Message Authentication Code，缩写为MAC）的报文摘要。它可以用来检查在消息传递过程中，其内容是否被更改过，不管更改的原因是来自意外或是蓄意攻击，从而保证报文的完整性。

### 小结
HTTP 无法保证数据的安全性和完整性，所以引入了 SSL，通过非对称加密来解决，HTTP 无法确认通信方的身份，则通过第三方CA颁发的证书来解决，通过消息认证码来保证报文的完整性。

所以 **HTTP + 加密 + 认证 + 完整性保护 = HTTPS**